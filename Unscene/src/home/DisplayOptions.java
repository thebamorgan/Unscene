
package home;

import java.awt.event.KeyEvent;
import java.io.FileReader;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

public class DisplayOptions extends javax.swing.JPanel {
    private String ConfigFile;              // File containing username and display mode information
    private String UserName;                // User's profile name
    private String Display;                 // Display mode
    private ButtonGroup displayModes;       // Button Group for display mode options
    
    
    /**
     * Creates new form DisplayOptions
     */
    public DisplayOptions() {
        initComponents();
    }
    
    /**
     * Overloaded Constructor
     * 
     * @param ConfigFile for settings
     * @throws Exception
     */
    public DisplayOptions(String ConfigFile) throws Exception {
        initComponents();
        this.ConfigFile = ConfigFile;
        this.UserName = "";
        this.Display = "";
        
        readOptions();
        configureOptions();
    }
    
    
    /**
     * Setup UI for JPanel
     */
    private void configureOptions() {
        UserNameLabel.setText("User Name: " + UserName);
        
        displayModes = new ButtonGroup();
        LightModeInput.setMnemonic(KeyEvent.VK_L);
        LightModeInput.setActionCommand("light");
        DarkModeInput.setMnemonic(KeyEvent.VK_D);
        DarkModeInput.setActionCommand("dark");
        displayModes.add(LightModeInput);
        displayModes.add(DarkModeInput);
    }
    
    /**
     * Read settings from data file and initialize respective attributes
     * 
     * @throws Exception 
     */
    private void readOptions() throws Exception {
        // Fetch main settings object
        Object obj = new JSONParser().parse(new FileReader(ConfigFile));
        JSONObject jo = (JSONObject) obj;
        
        // Read settings
        UserName = (String) jo.get("username");
        Display = (String) jo.get("display");
    }
    
    /**
     * Write new settings to data file
     * 
     * @throws Exception 
     */
    private void writeOptions() throws Exception {
        // Fetch main settings object
        Object obj = new JSONParser().parse(new FileReader(ConfigFile));
        JSONObject jo = (JSONObject) obj;
        
        if(UserNameInput.getText().length() != 0)
            UserName = UserNameInput.getText();
        
        jo.put("username", UserName);
        jo.put("display", Display);
        
        // Print to the file
        PrintWriter pw = new PrintWriter(ConfigFile);
        pw.write(jo.toJSONString());
        
        pw.flush();
        pw.close();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OptionsHeader = new javax.swing.JPanel();
        OptionsTitle = new javax.swing.JLabel();
        OptionsMenu = new javax.swing.JPanel();
        UserNameLabel = new javax.swing.JLabel();
        DarkModeInput = new javax.swing.JRadioButton();
        LightModeInput = new javax.swing.JRadioButton();
        UserNameInput = new javax.swing.JTextField();
        DisplayModeLabel1 = new javax.swing.JLabel();
        SaveOptions = new javax.swing.JButton();
        DisplayModeNote = new javax.swing.JLabel();

        OptionsTitle.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        OptionsTitle.setText("Options");

        javax.swing.GroupLayout OptionsHeaderLayout = new javax.swing.GroupLayout(OptionsHeader);
        OptionsHeader.setLayout(OptionsHeaderLayout);
        OptionsHeaderLayout.setHorizontalGroup(
            OptionsHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsHeaderLayout.createSequentialGroup()
                .addComponent(OptionsTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        OptionsHeaderLayout.setVerticalGroup(
            OptionsHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(OptionsTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
        );

        UserNameLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        UserNameLabel.setText("User Name:");

        DarkModeInput.setText("Dark Mode");
        DarkModeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DarkModeInputActionPerformed(evt);
            }
        });

        LightModeInput.setText("Light Mode");
        LightModeInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LightModeInputActionPerformed(evt);
            }
        });

        DisplayModeLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        DisplayModeLabel1.setText("Display Mode:");

        javax.swing.GroupLayout OptionsMenuLayout = new javax.swing.GroupLayout(OptionsMenu);
        OptionsMenu.setLayout(OptionsMenuLayout);
        OptionsMenuLayout.setHorizontalGroup(
            OptionsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OptionsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UserNameInput)
                    .addComponent(UserNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addGroup(OptionsMenuLayout.createSequentialGroup()
                        .addGroup(OptionsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(DarkModeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(LightModeInput, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(OptionsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(OptionsMenuLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(DisplayModeLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        OptionsMenuLayout.setVerticalGroup(
            OptionsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OptionsMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(UserNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(UserNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(LightModeInput)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DarkModeInput)
                .addContainerGap(274, Short.MAX_VALUE))
            .addGroup(OptionsMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(OptionsMenuLayout.createSequentialGroup()
                    .addGap(86, 86, 86)
                    .addComponent(DisplayModeLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(318, Short.MAX_VALUE)))
        );

        SaveOptions.setText("Save Changes");
        SaveOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveOptionsActionPerformed(evt);
            }
        });

        DisplayModeNote.setFont(new java.awt.Font("Helvetica Neue", 2, 14)); // NOI18N
        DisplayModeNote.setText("NOTE: Application relaunch is required to update display mode.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OptionsHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(OptionsMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                        .addComponent(DisplayModeNote)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SaveOptions, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OptionsHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OptionsMenu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SaveOptions, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                            .addComponent(DisplayModeNote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    
    /**
     * On "Save" click, write new settings to file and refresh UI with updated settings as necessary
     * @param evt 
     */
    private void SaveOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveOptionsActionPerformed
        try {
            writeOptions();
            System.out.println("test");
            readOptions();
        } catch (Exception ex) {
            Logger.getLogger(DisplayOptions.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        UnsceneGUI.refreshGUI();
    }//GEN-LAST:event_SaveOptionsActionPerformed

    /**
     * If "Dark mode" selected, update Display field accordingly
     * @param evt 
     */
    private void DarkModeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DarkModeInputActionPerformed
        String s = evt.getActionCommand();
        if(s.contains("light"))
            Display = "light";
        if(s.contains("dark"))
            Display = "dark";
    }//GEN-LAST:event_DarkModeInputActionPerformed

    /**
     * If "Light mode" selected, update Display field accordingly
     * @param evt 
     */
    private void LightModeInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LightModeInputActionPerformed
        String s = evt.getActionCommand();
        if(s.contains("light"))
            Display = "light";
        if(s.contains("dark"))
            Display = "dark";    }//GEN-LAST:event_LightModeInputActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton DarkModeInput;
    private javax.swing.JLabel DisplayModeLabel1;
    private javax.swing.JLabel DisplayModeNote;
    private javax.swing.JRadioButton LightModeInput;
    private javax.swing.JPanel OptionsHeader;
    private javax.swing.JPanel OptionsMenu;
    private javax.swing.JLabel OptionsTitle;
    private javax.swing.JButton SaveOptions;
    private javax.swing.JTextField UserNameInput;
    private javax.swing.JLabel UserNameLabel;
    // End of variables declaration//GEN-END:variables
}
