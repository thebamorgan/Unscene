/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package home;

/*
import javax.swing.JLabel;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.io.File;
*/
import java.util.ArrayList;
import javax.swing.DefaultListModel;
/*
import javax.swing.JList;
import javax.swing.JScrollPane;
*/
import javax.swing.ListSelectionModel;
/*
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
*/

/*
import java.io.File;
*/
import java.awt.Image;
/*
import java.awt.image.BufferedImage;
*/
import javax.swing.ImageIcon;
import javax.imageio.ImageIO;

import java.io.IOException;
import java.io.UncheckedIOException;

import java.net.URL;
import java.io.InputStream;
/*
import java.io.InputStreamReader;
import java.util.Set;
*/



/**
 *
 * @author salwajeries
 */
public class testHome extends javax.swing.JFrame {

    ArrayList<Movie> movies;    
    DefaultListModel movieModel;
    ListSelectionModel movieListSelectionModel;
    
    ArrayList<TVShow> shows;
    DefaultListModel showModel;
    ListSelectionModel showListSelectionModel;
    
    ArrayList<Season> seasons;
    DefaultListModel seasonModel;
    ListSelectionModel seasonListSelectionModel;
    
    /**
     * Default Constructor
     */
    public testHome() {
        initComponents();
        customizeOpts();
    }
    
    /**
     * Overloaded Constructor
     * 
     * @param movieList
     * @param showsList 
     */
    public testHome(ArrayList<Movie> movieList, ArrayList<TVShow> showsList) {
        initComponents();
        this.movies = movieList;
        this.shows = showsList;
        customizeOpts();
    }
    
    
    /**
     * Setup movie and show models for display
     */
    private void customizeOpts() {
        // Initialize movie model
        movieModel = new DefaultListModel<String>();
        
        for(Movie m : movies) {
            movieModel.addElement(m.getTitle());
            System.out.println(m.getTitle());
        }        
        
        moviesList.setModel(movieModel);
        moviesList.setSelectedIndex(0);
        
        // Initialize show model
        showModel = new DefaultListModel<String>();

        for(TVShow s : shows) {
            showModel.addElement(s.getTitle());
            System.out.println(s.getTitle());
        }
        
        showsList.setModel(showModel);
        showsList.setSelectedIndex(0);
        
    }
    
    
    private void customizeSeasons(int showIndex) {
        // Initialize season model
        seasonModel = new DefaultListModel<String>();
        
        // Get seasons array from current TV show
        seasons = new ArrayList(shows.get(showIndex).getSeasons());
        
        for(Season s : seasons) {
            seasonModel.addElement(s.getSeasonTitle());
            System.out.println(s.getSeasonTitle());
        }
        
        seasonsList.setModel(seasonModel);
        seasonsList.setSelectedIndex(0);
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        navTabGroup = new javax.swing.JTabbedPane();
        moviesTab = new javax.swing.JPanel();
        moviesScroll = new javax.swing.JScrollPane();
        moviesList = new javax.swing.JList<>();
        displayMovieInfoPage = new javax.swing.JPanel();
        movieTitle = new javax.swing.JLabel();
        movieArtSource = new javax.swing.JLabel();
        movieInterested = new javax.swing.JCheckBox();
        movieWatched = new javax.swing.JCheckBox();
        movieRDate = new javax.swing.JLabel();
        movieRunT = new javax.swing.JLabel();
        movieGenre = new javax.swing.JLabel();
        movieTagline = new javax.swing.JLabel();
        movieDescScroll = new javax.swing.JScrollPane();
        movieDesc = new javax.swing.JTextArea();
        showsTab = new javax.swing.JPanel();
        showsScroll = new javax.swing.JScrollPane();
        showsList = new javax.swing.JList<>();
        displayShowInfoPage = new javax.swing.JPanel();
        showTitle = new javax.swing.JLabel();
        showArtSource = new javax.swing.JLabel();
        showInterested = new javax.swing.JCheckBox();
        showWatched = new javax.swing.JCheckBox();
        showOriginalRDate = new javax.swing.JLabel();
        showNumSeasons = new javax.swing.JLabel();
        showGenre = new javax.swing.JLabel();
        showTagline = new javax.swing.JLabel();
        showDescScroll = new javax.swing.JScrollPane();
        showDesc = new javax.swing.JTextArea();
        seasonsScroll = new javax.swing.JScrollPane();
        seasonsList = new javax.swing.JList<>();
        displaySeasonInfoPage = new javax.swing.JPanel();
        seasonTitle = new javax.swing.JLabel();
        seasonRDate = new javax.swing.JLabel();
        seasonEpT = new javax.swing.JLabel();
        seasonWatched = new javax.swing.JCheckBox();
        seasonEpW = new javax.swing.JSlider();
        seasonEpWLabel = new javax.swing.JLabel();
        seasonDescScroll = new javax.swing.JScrollPane();
        seasonDesc = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        moviesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        moviesList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                moviesListValueChanged(evt);
            }
        });
        moviesScroll.setViewportView(moviesList);

        movieTitle.setText("Title");

        movieInterested.setText("Interested in this movie?");
        movieInterested.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieInterestedActionPerformed(evt);
            }
        });

        movieWatched.setText("Watched this movie already?");
        movieWatched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                movieWatchedActionPerformed(evt);
            }
        });

        movieRDate.setText("Release Date");

        movieRunT.setText("Run Time");

        movieGenre.setText("Genre");

        movieTagline.setText("Tagline");

        movieDesc.setColumns(20);
        movieDesc.setRows(5);
        movieDescScroll.setViewportView(movieDesc);

        javax.swing.GroupLayout displayMovieInfoPageLayout = new javax.swing.GroupLayout(displayMovieInfoPage);
        displayMovieInfoPage.setLayout(displayMovieInfoPageLayout);
        displayMovieInfoPageLayout.setHorizontalGroup(
            displayMovieInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayMovieInfoPageLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(displayMovieInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(movieArtSource, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(movieInterested)
                    .addComponent(movieWatched))
                .addGap(24, 24, 24)
                .addGroup(displayMovieInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(movieTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(displayMovieInfoPageLayout.createSequentialGroup()
                        .addGroup(displayMovieInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(movieRDate)
                            .addGroup(displayMovieInfoPageLayout.createSequentialGroup()
                                .addComponent(movieRunT)
                                .addGap(18, 18, 18)
                                .addComponent(movieGenre)))
                        .addGap(0, 395, Short.MAX_VALUE))
                    .addComponent(movieTagline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(movieDescScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)))
        );
        displayMovieInfoPageLayout.setVerticalGroup(
            displayMovieInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayMovieInfoPageLayout.createSequentialGroup()
                .addGroup(displayMovieInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(displayMovieInfoPageLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(movieArtSource, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayMovieInfoPageLayout.createSequentialGroup()
                        .addComponent(movieTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(movieRDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(displayMovieInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(movieRunT)
                            .addComponent(movieGenre))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(movieTagline, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(movieDescScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(movieInterested)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(movieWatched)
                .addGap(107, 107, 107))
        );

        javax.swing.GroupLayout moviesTabLayout = new javax.swing.GroupLayout(moviesTab);
        moviesTab.setLayout(moviesTabLayout);
        moviesTabLayout.setHorizontalGroup(
            moviesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(moviesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(moviesScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayMovieInfoPage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        moviesTabLayout.setVerticalGroup(
            moviesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, moviesTabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(moviesTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(displayMovieInfoPage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(moviesScroll))
                .addContainerGap())
        );

        navTabGroup.addTab("Movies", moviesTab);

        showsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        showsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                showsListValueChanged(evt);
            }
        });
        showsScroll.setViewportView(showsList);

        showTitle.setText("Title");

        showInterested.setText("Interested in this show?");
        showInterested.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showInterestedActionPerformed(evt);
            }
        });

        showWatched.setText("Watched the full show?");
        showWatched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showWatchedActionPerformed(evt);
            }
        });

        showOriginalRDate.setText("Release Date");

        showNumSeasons.setText("Seasons");

        showGenre.setText("Genre");

        showTagline.setText("Tagline");

        showDesc.setColumns(20);
        showDesc.setRows(5);
        showDescScroll.setViewportView(showDesc);

        seasonsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        seasonsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                seasonsListValueChanged(evt);
            }
        });
        seasonsScroll.setViewportView(seasonsList);

        javax.swing.GroupLayout displayShowInfoPageLayout = new javax.swing.GroupLayout(displayShowInfoPage);
        displayShowInfoPage.setLayout(displayShowInfoPageLayout);
        displayShowInfoPageLayout.setHorizontalGroup(
            displayShowInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayShowInfoPageLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(displayShowInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showArtSource, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showInterested)
                    .addComponent(showWatched))
                .addGap(24, 24, 24)
                .addGroup(displayShowInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(showTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showTagline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(showDescScroll)
                    .addComponent(seasonsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(displayShowInfoPageLayout.createSequentialGroup()
                        .addGroup(displayShowInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(showOriginalRDate)
                            .addComponent(showNumSeasons)
                            .addComponent(showGenre))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        displayShowInfoPageLayout.setVerticalGroup(
            displayShowInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayShowInfoPageLayout.createSequentialGroup()
                .addGroup(displayShowInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(displayShowInfoPageLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(showArtSource, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(displayShowInfoPageLayout.createSequentialGroup()
                        .addComponent(showTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(showOriginalRDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showNumSeasons)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(showGenre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showTagline, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addGroup(displayShowInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayShowInfoPageLayout.createSequentialGroup()
                                .addComponent(showInterested)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(showWatched))
                            .addComponent(showDescScroll, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(seasonsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        seasonTitle.setText("Title");

        seasonRDate.setText("Release Date");

        seasonEpT.setText("Run Time");

        seasonWatched.setText("Watched the full season?");
        seasonWatched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seasonWatchedActionPerformed(evt);
            }
        });

        seasonEpWLabel.setText("Number of Episodes Watched:");

        seasonDesc.setColumns(20);
        seasonDesc.setRows(5);
        seasonDescScroll.setViewportView(seasonDesc);

        javax.swing.GroupLayout displaySeasonInfoPageLayout = new javax.swing.GroupLayout(displaySeasonInfoPage);
        displaySeasonInfoPage.setLayout(displaySeasonInfoPageLayout);
        displaySeasonInfoPageLayout.setHorizontalGroup(
            displaySeasonInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displaySeasonInfoPageLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(seasonEpWLabel)
                .addGap(41, 41, 41))
            .addGroup(displaySeasonInfoPageLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(displaySeasonInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(seasonEpW, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(seasonTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(displaySeasonInfoPageLayout.createSequentialGroup()
                        .addGroup(displaySeasonInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(seasonRDate)
                            .addComponent(seasonEpT)
                            .addComponent(seasonWatched))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(seasonDescScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE))
                .addContainerGap())
        );
        displaySeasonInfoPageLayout.setVerticalGroup(
            displaySeasonInfoPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displaySeasonInfoPageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(seasonTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(seasonRDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seasonEpT)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(seasonDescScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seasonWatched)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(seasonEpWLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(seasonEpW, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95))
        );

        javax.swing.GroupLayout showsTabLayout = new javax.swing.GroupLayout(showsTab);
        showsTab.setLayout(showsTabLayout);
        showsTabLayout.setHorizontalGroup(
            showsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(showsScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displayShowInfoPage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(displaySeasonInfoPage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        showsTabLayout.setVerticalGroup(
            showsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showsTabLayout.createSequentialGroup()
                .addGroup(showsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(showsTabLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(showsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(displayShowInfoPage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showsScroll, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(displaySeasonInfoPage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        navTabGroup.addTab("TV Shows", showsTab);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(navTabGroup)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(navTabGroup)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Display movie information when a movie title is selected in the list
     * @param evt 
     */
    private void moviesListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_moviesListValueChanged
        displayMovieInfo(moviesList.getSelectedIndex());
    }//GEN-LAST:event_moviesListValueChanged

    private void movieInterestedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieInterestedActionPerformed
        // Get movie object
        Movie currentMovie = movies.get(moviesList.getSelectedIndex());
        
        // Set movie interest status
        if(movieInterested.isSelected())
            currentMovie.setInterested(true);
        else
            currentMovie.setInterested(false);
        
        // Re-display movie info
        displayMovieInfo(moviesList.getSelectedIndex());
    }//GEN-LAST:event_movieInterestedActionPerformed

    private void movieWatchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_movieWatchedActionPerformed
        // Get movie object
        Movie currentMovie = movies.get(moviesList.getSelectedIndex());
        
        // Set movie interest status
        if(movieWatched.isSelected())
            currentMovie.setViewed(true);
        else
            currentMovie.setViewed(false);
        
        // Re-display movie info
        displayMovieInfo(moviesList.getSelectedIndex());
    }//GEN-LAST:event_movieWatchedActionPerformed

    /**
     * Display show information when a show title is selected in the list
     * @param evt 
     */
    private void showsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_showsListValueChanged
        displayShowInfo(showsList.getSelectedIndex());
    }//GEN-LAST:event_showsListValueChanged

    private void showInterestedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showInterestedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showInterestedActionPerformed

    private void showWatchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showWatchedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_showWatchedActionPerformed

    private void seasonsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_seasonsListValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_seasonsListValueChanged

    private void seasonWatchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seasonWatchedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_seasonWatchedActionPerformed

    
    
    /**
     * Fetch movie data for selected object and display to the screen
     * @param movieIndex 
     */
    private void displayMovieInfo(int movieIndex) {
        
        // Get current movie object
        Movie currentMovie = movies.get(movieIndex);
        
        // Set display with movie data
        movieInterested.setSelected(currentMovie.getInterested());
        movieWatched.setSelected(currentMovie.getViewed());
        movieTagline.setText(currentMovie.getTagline());
        movieDesc.setText(currentMovie.getDescription());
        movieDesc.setEditable(false);
        movieDesc.setLineWrap(true);
        movieDesc.setWrapStyleWord(true);
        movieGenre.setText(currentMovie.getGenre());
        movieRDate.setText(currentMovie.getRDateString());
        movieRunT.setText(currentMovie.getRunTString());
        movieTitle.setText(currentMovie.getTitle());

        // Setup movie poster
        try {
            String movieURL = "https://image.tmdb.org/t/p/w300_and_h450_bestv2" + currentMovie.getArt();
            URL imageURL = new URL(movieURL);
            InputStream in = imageURL.openStream();
            Image image = ImageIO.read(in);
            
            int height = (int) movieArtSource.getSize().getHeight();
            int width = (int) movieArtSource.getSize().getHeight();
            image = image.getScaledInstance(200, 300, Image.SCALE_DEFAULT);
            
            movieArtSource.setIcon(new ImageIcon(image));
        }
        catch (IOException e) {
            throw new UncheckedIOException(e);
        }
        
    }
    
    
    
    private void displayShowInfo(int showIndex) {
        
        // Get current show object
        TVShow currentShow = shows.get(showIndex);
        
        // Set display with show data
        showInterested.setSelected(currentShow.getInterested());
        showWatched.setSelected(currentShow.getViewed());
        showTagline.setText(currentShow.getTagline());
        showDesc.setText(currentShow.getDescription());
        showDesc.setEditable(false);
        showDesc.setLineWrap(true);
        showDesc.setWrapStyleWord(true);
        showGenre.setText(currentShow.getGenre());
        showOriginalRDate.setText(currentShow.getOriginalRDateString());
        showTitle.setText(currentShow.getTitle());
        
        if(currentShow.getNumSeasons() > 1)
            showNumSeasons.setText(Integer.toString(currentShow.getNumSeasons()) + " Seasons");
        else
            showNumSeasons.setText(Integer.toString(currentShow.getNumSeasons()) + " Season");


        // Setup movie poster
        try {
            String showURL = "https://image.tmdb.org/t/p/w300_and_h450_bestv2" + currentShow.getArt();
            URL imageURL = new URL(showURL);
            InputStream in = imageURL.openStream();
            Image image = ImageIO.read(in);
            
            int height = (int) showArtSource.getSize().getHeight();
            int width = (int) showArtSource.getSize().getHeight();
            image = image.getScaledInstance(200, 300, Image.SCALE_DEFAULT);
            
            showArtSource.setIcon(new ImageIcon(image));
        }
        catch (IOException e) {
            throw new UncheckedIOException(e);
        }
        
        customizeSeasons(showIndex);
        
    }
    
    
    private void displaySeasonInfo() {
        
    }
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(testHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(testHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(testHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(testHome.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new testHome().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel displayMovieInfoPage;
    private javax.swing.JPanel displaySeasonInfoPage;
    private javax.swing.JPanel displayShowInfoPage;
    private javax.swing.JLabel movieArtSource;
    private javax.swing.JTextArea movieDesc;
    private javax.swing.JScrollPane movieDescScroll;
    private javax.swing.JLabel movieGenre;
    private javax.swing.JCheckBox movieInterested;
    private javax.swing.JLabel movieRDate;
    private javax.swing.JLabel movieRunT;
    private javax.swing.JLabel movieTagline;
    private javax.swing.JLabel movieTitle;
    private javax.swing.JCheckBox movieWatched;
    private javax.swing.JList<String> moviesList;
    private javax.swing.JScrollPane moviesScroll;
    private javax.swing.JPanel moviesTab;
    private javax.swing.JTabbedPane navTabGroup;
    private javax.swing.JTextArea seasonDesc;
    private javax.swing.JScrollPane seasonDescScroll;
    private javax.swing.JLabel seasonEpT;
    private javax.swing.JSlider seasonEpW;
    private javax.swing.JLabel seasonEpWLabel;
    private javax.swing.JLabel seasonRDate;
    private javax.swing.JLabel seasonTitle;
    private javax.swing.JCheckBox seasonWatched;
    private javax.swing.JList<String> seasonsList;
    private javax.swing.JScrollPane seasonsScroll;
    private javax.swing.JLabel showArtSource;
    private javax.swing.JTextArea showDesc;
    private javax.swing.JScrollPane showDescScroll;
    private javax.swing.JLabel showGenre;
    private javax.swing.JCheckBox showInterested;
    private javax.swing.JLabel showNumSeasons;
    private javax.swing.JLabel showOriginalRDate;
    private javax.swing.JLabel showTagline;
    private javax.swing.JLabel showTitle;
    private javax.swing.JCheckBox showWatched;
    private javax.swing.JList<String> showsList;
    private javax.swing.JScrollPane showsScroll;
    private javax.swing.JPanel showsTab;
    // End of variables declaration//GEN-END:variables
}
